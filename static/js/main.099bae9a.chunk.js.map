{"version":3,"sources":["utils/validator/object-helpers.js","Redux/users-reducer.js","Component/Navbar/Navbar.module.css","Component/Login/Login.module.css","api/api.js","Redux/auth-reducer.js","Component/Navbar/Navbar.js","Component/Header/Header.js","Component/Header/HeaderContainer.js","common/FormControl.js","utils/validator/validators.js","Component/Login/LoginForm.js","Component/Login/Login.js","Redux/app-reducer.js","App.js","serviceWorker.js","Redux/redux-store.js","index.js","Component/Header/Header.module.css","Redux/profile-reducer.js","Redux/message-reducer.js"],"names":["updateObjectInArray","items","objPropName","itemId","newObgProps","map","u","initialState","users","pageSize","totalUsersCount","currentPage","follow","userId","type","unfollow","setUsers","setCurrentPage","setTotalUsersCount","getUsersThunk","dispatch","a","usersAPI","getUsers","data","totalCount","followUnfollow","apiMethod","togleFollowingProgres","resultCode","followThunk","unfollowThunk","usersReducer","state","action","id","module","exports","instunce","axios","baseURL","withCredentials","headers","get","then","response","post","delete","profileAPI","getStatus","updateStatus","status","put","authAPI","me","login","email","password","rememberMe","logout","isAuth","authMeThunk","payload","setUserData","loginThunk","messages","length","stopSubmit","logoutThunk","authReducer","Navbar","className","s","navbar","to","Header","props","header","logo","loginBlock","onClick","HeaderContainer","this","React","Component","connect","auth","Textarea","input","meta","hasError","touched","error","formControl","required","value","LoginForm","onSubmit","handleSubmit","Field","component","name","placeholder","validate","LoginReduxForm","reduxForm","form","formData","initialized","appReducer","MessageContainer","lazy","ProfileContainer","UsersContainer","App","initializedAPPThunk","path","render","Suspense","fallback","compose","app","promise","Promise","all","Boolean","window","location","hostname","match","reducers","combineReducers","profilePage","profileReducer","messagePage","messageReducer","usersPage","formReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message","newPost","profile","addPostAC","updateNewPostTextAC","newText","setUsersProfile","setStatusAC","setStatusThunk","updateStatusThunk","stateCopy","push","dialogData","messageData","addMessageAC","addNewMessage","newMessage"],"mappings":"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","file":"static/js/main.099bae9a.chunk.js","sourcesContent":["export const updateObjectInArray = (items,objPropName,itemId,newObgProps) =>{\r\n   return items.map(u=>{\r\n    if(u[objPropName] === itemId){\r\n        return{...u,...newObgProps}\r\n        \r\n    }\r\n    return u\r\n})\r\n\r\n}","import { usersAPI } from \"../api/api\"\r\nimport { updateObjectInArray } from \"../utils/validator/object-helpers\"\r\n\r\nconst FOLLOW ='FOLLOW'\r\nconst UNFOLLOW = 'UNFOLLOW'\r\nconst SET_USERS = 'SET-USERS'\r\nconst SET_CURRENT_PAGE = 'SET-CURRENT-PAGE'\r\nconst SET_TOTAL_USERS_COUNT = 'SET-TOTAL-USERS-COUNT'\r\nlet initialState = {\r\n    users:[],\r\n    pageSize:10,\r\n    totalUsersCount:0,\r\n    currentPage:1,\r\n    \r\n    \r\n}\r\nlet usersReducer = (state = initialState ,action) =>{\r\n    switch(action.type){\r\n        case FOLLOW:\r\n            return{\r\n                ...state,\r\n                users: updateObjectInArray(state.users,'id',action.userId,{follow:true})\r\n                /*state.users.map(u=>{\r\n                    if(u.id === action.userId){\r\n                        return{...u,follow:true}\r\n                        \r\n                    }\r\n                    return u*/\r\n                \r\n\r\n            }\r\n        case UNFOLLOW:\r\n            return{\r\n                ...state,\r\n                users:state.users.map(u=>{\r\n                    if(u.id === action.userId){\r\n                        return{...u,follow:false}\r\n                    }\r\n                    return u\r\n                })\r\n            }  \r\n            \r\n        case SET_USERS:\r\n            return{\r\n                ...state,\r\n                users:action.users\r\n            }\r\n        case SET_CURRENT_PAGE:\r\n            return{\r\n                ...state,\r\n                currentPage:action.currentPage\r\n            }    \r\n        case SET_TOTAL_USERS_COUNT:\r\n            return{\r\n                ...state,\r\n                totalUsersCount:action.totalUsersCount\r\n            }    \r\n         default:\r\n             return state    \r\n    }\r\n}\r\nexport let follow = (userId) =>{\r\n    return{\r\n        type:'FOLLOW',userId\r\n    }\r\n}\r\nexport let unfollow = (userId) =>{\r\n    return{\r\n        type:'UNFOLLOW',userId\r\n    }\r\n}\r\nexport let setUsers = (users) =>{\r\n    return{\r\n        type:'SET-USERS' ,users\r\n    }\r\n}\r\nexport let setCurrentPage = (currentPage) =>{\r\n    return{\r\n        type:'SET-CURRENT-PAGE',currentPage\r\n    }\r\n}\r\nexport let setTotalUsersCount = (totalUsersCount) =>{\r\n    return{\r\n        type:'SET-TOTAL-USERS-COUNT',totalUsersCount\r\n    }\r\n}\r\nexport const getUsersThunk = (currentPage,pageSize) => async(dispatch) =>{\r\n    let data  = await usersAPI.getUsers(currentPage,pageSize);\r\n            dispatch(setUsers(data.items))\r\n            dispatch(setTotalUsersCount(data.totalCount))\r\n}\r\nconst followUnfollow = async (dispatch,apiMethod,togleFollowingProgres,userId) =>{\r\n    let data = await apiMethod\r\n        \r\n    if(data.resultCode === 0){\r\n        dispatch(togleFollowingProgres)\r\n    }\r\n}\r\nexport const followThunk = (userId) =>{\r\n    return async (dispatch) =>{\r\n        let apiMethod = usersAPI.follow(userId)\r\n        let togleFollowingProgres = follow(userId)\r\n        followUnfollow(dispatch,apiMethod,togleFollowingProgres,userId)\r\n       \r\n    }\r\n}\r\nexport const unfollowThunk =  (userId) =>{\r\n    return async (dispatch)=>{\r\n        let apiMethod = usersAPI.unfollow(userId)\r\n        let togleFollowingProgres = unfollow(userId)\r\n        followUnfollow(dispatch,apiMethod,togleFollowingProgres,userId)\r\n\r\n        \r\n    }\r\n}\r\nexport default usersReducer","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__GfsyM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__JT9c1\"};","import *as axios from 'axios'\r\nimport { setUserData } from '../Redux/auth-reducer'\r\nconst instunce = axios.create({\r\n    baseURL:'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials:true,\r\n    headers:{\r\n        \"API-KEY\": \"17342be6-466e-4833-9107-a0b5d7c39767\"\r\n    }\r\n})\r\nexport const getUsers = (currentPage,pageSize) =>{\r\n    return instunce.get(`users?page=${currentPage}&count=${pageSize}`\r\n    ,{withCredentials:true})\r\n    .then(response=>{\r\n        return response.data\r\n    })\r\n}\r\nexport const usersAPI = {\r\n    getUsers(currentPage,pageSize){\r\n        return instunce.get(`users?page=${currentPage}&count=${pageSize}`\r\n        ,{withCredentials:true})\r\n        .then(response=>{\r\n            return response.data\r\n        })\r\n    },\r\n    follow(userId){\r\n        return  instunce.post(`follow/${userId}`,{}\r\n       )\r\n       .then(response=>{\r\n        return response.data\r\n    })\r\n        \r\n    },\r\n    unfollow(userId){\r\n        return instunce.delete(`follow/${userId}`\r\n       )\r\n       .then(response=>{\r\n        return response.data\r\n    })\r\n    }\r\n    \r\n}\r\nexport const profileAPI = {\r\n    getStatus(userId){\r\n        return instunce.get('profile/status' + userId)\r\n    },\r\n    updateStatus(status){\r\n        return instunce.put('profile/status',{status:status})\r\n    }\r\n}\r\nexport const authAPI ={\r\n    me(){\r\n        return instunce.get('auth/me')\r\n    },\r\n    login(email,password,rememberMe){\r\n        return instunce.post('auth/login',{email,password,rememberMe})\r\n    },\r\n    logout(){\r\n        return instunce.delete(`auth/login`)\r\n    }\r\n   \r\n}","import { stopSubmit } from \"redux-form\"\r\nimport { authAPI } from \"../api/api\"\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA'\r\nlet initialState = {\r\n    id:null,\r\n    login:null,\r\n    email:null,\r\n    \r\n    isAuth:false\r\n}\r\nlet authReducer = (state = initialState,action) =>{\r\n    switch(action.type){\r\n        case SET_USER_DATA:\r\n            return{\r\n                ...state,\r\n                ...action.payload,\r\n                \r\n            }\r\n        default: \r\n        return state    \r\n    }\r\n}\r\n\r\nexport let setUserData = (id,email,login,isAuth) =>{\r\n    return{\r\n        type:'SET_USER_DATA',payload:{id,email,login,isAuth}\r\n    }\r\n}\r\nexport const authMeThunk = () =>{\r\n    return (dispatch) =>{\r\n        return authAPI.me()\r\n        .then(response =>{\r\n            if(response.data.resultCode === 0){\r\n                let {id,email,login} = response.data.data\r\n                dispatch(setUserData(id,email,login,true))\r\n            }\r\n        })\r\n    }\r\n}\r\nexport const loginThunk = (email,password,rememberMe) =>{\r\n    return (dispatch) =>{\r\n        authAPI.login(email,password,rememberMe)\r\n        .then(response =>{\r\n            if(response.data.resultCode === 0){\r\n                dispatch(authMeThunk())\r\n            }\r\n            else{\r\n                let messages = response.data.messages.length > 0?\r\n                response.data.messages[0] : 'Some error'\r\n                dispatch(stopSubmit('login',{email:messages}))\r\n            }\r\n        })\r\n    }\r\n}\r\nexport const logoutThunk = () =>{\r\n    return (dispatch) =>{\r\n        authAPI.logout()\r\n        .then(response =>{\r\n            if(response.data.resultCode === 0){\r\n                dispatch(authMeThunk(null,null,null,false))\r\n            }\r\n        })\r\n    }\r\n}\r\nexport default authReducer","import React from 'react'\r\nimport s from './Navbar.module.css'\r\nimport { NavLink } from 'react-router-dom';\r\nlet Navbar = () =>{\r\n    return(\r\n        <div className={s.navbar}>\r\n            \r\n            <div>\r\n                <NavLink to='/profile'>Profile</NavLink>\r\n            </div>\r\n            <div>\r\n                <NavLink to='/message'>Message</NavLink>\r\n            </div>\r\n            <div>\r\n                <NavLink to='/users'>Users</NavLink>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\nexport default Navbar","import React from 'react'\r\nimport s from './Header.module.css'\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Redirect } from 'react-router-dom'\r\nlet Header = (props) =>{\r\n   \r\n    return(\r\n        <div className={s.header}>  \r\n                <div className={s.logo}>\r\n                <h1>Lk</h1>\r\n                </div>\r\n                \r\n                \r\n                <div className={s.loginBlock}>\r\n                \r\n                    {props.isAuth?\r\n                    <div>{props.login}  <button onClick={props.logoutThunk}>LogOut</button>  </div>: <NavLink to={'/login'}>Login</NavLink>}\r\n                    \r\n                </div>\r\n          \r\n        </div>\r\n    )\r\n}\r\nexport default Header","  \r\nimport React from 'react'\r\nimport s from './Header.module.css'\r\nimport { NavLink } from 'react-router-dom';\r\nimport Header from './Header';\r\nimport *as axios from 'axios';\r\nimport { connect } from 'react-redux';\r\nimport { authMeThunk, setUserData ,logoutThunk} from '../../Redux/auth-reducer';\r\nclass HeaderContainer extends React.Component{\r\n   \r\n    render(){\r\n        return(\r\n            <div className={s.header}>  \r\n                    <Header {...this.props}\r\n                    isAuth={this.props.isAuth}\r\n                    login={this.props.login}\r\n                    logoutThunk={this.props.logoutThunk}\r\n                    />\r\n              \r\n            </div>\r\n        )\r\n    }\r\n}\r\nlet mapStateToProps = (state) =>{\r\n    return{\r\n        isAuth:state.auth.isAuth,\r\n        login:state.auth.login\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,{authMeThunk,logoutThunk})(HeaderContainer)\r\n","import React from 'react'\r\nimport s from './FormControl.module.css'\r\nexport const Textarea = ({input,meta,...props}) =>{\r\n    const hasError = meta.touched && meta.error\r\n    return(\r\n        <div className={s.formControl + '' + (hasError? s.error : '')}>\r\n            <div>\r\n                <textarea {...input} {...props}/>\r\n             </div>\r\n    {hasError && <span>{meta.error}</span>}   \r\n        </div>\r\n    )\r\n}","export const required = value =>{\r\n    if(value) return undefined;\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) =>(value) =>{\r\n    if(value.length > maxLength) return `Max length ${maxLength} symbole`;\r\n    return undefined\r\n\r\n}","import React from 'react'\r\nimport { Field } from 'redux-form';\r\nimport { Textarea } from '../../common/FormControl';\r\nimport { required } from '../../utils/validator/validators';\r\nlet LoginForm = (props) =>{\r\n    return(\r\n        <div>\r\n            <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                 <Field component={Textarea} name={'email'} placeholder={'email'} validate={[required]}/>\r\n                \r\n            </div>\r\n            <div>\r\n                <Field component={Textarea} name={'password'} placeholder={'Password'}  type={'password'}/>\r\n                \r\n            </div>\r\n            <div>\r\n                <Field component={'input'} type={'checkbox'} name={'checkbox'}/> remember me\r\n                 \r\n            </div>\r\n                {props.error && <div>{props.error}</div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n            </form>\r\n             \r\n        </div>\r\n    )\r\n}\r\nexport default LoginForm;","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { reduxForm } from 'redux-form'\r\nimport { loginThunk } from '../../Redux/auth-reducer'\r\nimport s from './Login.module.css'\r\nimport LoginForm from './LoginForm'\r\nimport { Redirect } from 'react-router-dom'\r\nconst LoginReduxForm = reduxForm({form:'login'})(LoginForm)\r\nlet Login = (props) =>{\r\n    \r\n    const onSubmit = (formData) =>{\r\n        props.loginThunk(formData.email,formData.password,formData.rememberMe)\r\n    }\r\n    if(props.isAuth){\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n    return(\r\n        <div className={s.login}>\r\n            <h1>Login</h1>\r\n           <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\nlet mapStateToProps = (state) =>{\r\n    return{\r\n        isAuth:state.auth.isAuth\r\n    }\r\n}\r\nexport default connect(mapStateToProps,{loginThunk})(Login)","\r\nimport { authMeThunk } from \"./auth-reducer\"\r\n\r\nconst SET_INITIALZED = 'SET_INITIALZED'\r\nlet initialState = {\r\n    initialized:false\r\n}\r\nlet appReducer = (state = initialState,action)=>{\r\n    switch(action.type){\r\n        case SET_INITIALZED:\r\n            return{\r\n                ...state,\r\n                initialized:true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const initializedSuccess = () =>{\r\n    return{\r\n        type:'SET_INITIALZED'\r\n    }\r\n}\r\nexport const initializedAPPThunk = () =>{\r\n    return (dispatch) =>{\r\n        let promise = dispatch(authMeThunk())\r\n        Promise.all([promise]).\r\n        then(()=>{\r\n            dispatch(initializedSuccess())\r\n        })\r\n    }\r\n}\r\nexport default appReducer","import React from 'react';\nimport './App.css';\nimport Navbar from './Component/Navbar/Navbar';\nimport { Route } from 'react-router-dom';\nimport HeaderContainer from './Component/Header/HeaderContainer';\nimport Login from './Component/Login/Login';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { initializedAPPThunk } from './Redux/app-reducer';\nconst MessageContainer = React.lazy(() => import('./Component/Message/MessageContainer'))\nconst ProfileContainer = React.lazy(() => import('./Component/Profile/ProfileContainer'))\nconst UsersContainer = React.lazy(()=> import('./Component/Users/UsersContainer'))  \n \n\nclass App extends React.Component{\n  componentDidMount(){\n    this.props.initializedAPPThunk()\n    \n\n}\n  render(){\n    if(!this.props.initialized){\n      return <h1>Gf</h1>\n    }\n    return (\n    \n      <div className=\"App\">\n          <HeaderContainer/>\n          <div className='info'>\n            \n            <Navbar/>\n            <Route path='/profile/:userId?' render={() =>{\n              return <React.Suspense fallback={<div>Login ...</div>}>\n                <ProfileContainer/>\n              </React.Suspense>\n            }}/>\n            <Route path='/message' render={()=>{\n              return <React.Suspense fallback={<div>Login...</div>}>\n                <MessageContainer/>\n              </React.Suspense>\n            }}/>\n            <Route path='/users' render={()=>{\n              return <React.Suspense fallback={<div>Loading...</div>}>\n                <UsersContainer/>\n              </React.Suspense>\n            }}/>\n            <Route path='/login' render={()=><Login/>}/>\n          </div>\n      </div>\n      \n    );\n  }\n}\nlet mapStateToProps = (state) =>{\n  return{\n    initialized:state.app.initialized\n  }\n}\nexport default  compose(\n  connect(mapStateToProps,{initializedAPPThunk})\n)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport authReducer from './auth-reducer';\r\nimport messageReducer from './message-reducer';\r\nimport profileReducer from './profile-reducer';\r\nimport usersReducer from './users-reducer';\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport appReducer from './app-reducer';\r\nlet reducers = combineReducers({\r\n    profilePage : profileReducer,\r\n    messagePage : messageReducer,\r\n    usersPage : usersReducer,\r\n    auth : authReducer,\r\n    app: appReducer,\r\n    form : formReducer\r\n})\r\nlet store = createStore(reducers,applyMiddleware(thunkMiddleware))\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {  BrowserRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport state, { addPost, updateNewPostText, subscribe, addMessage } from './Redux/state';\nimport store from './Redux/redux-store';\n\n  ReactDOM.render(\n    <React.StrictMode>\n       <BrowserRouter>\n       <Provider store={store}>\n      <App \n        />\n        </Provider>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3yS_c\",\"logo\":\"Header_logo__3zt42\",\"loginBlock\":\"Header_loginBlock__30gjq\"};","import { profileAPI } from \"../api/api\"\r\n\r\nconst ADD_POST = 'ADD-POST'\r\nconst UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT'\r\nconst SET_USERS_PROFILE = 'SET_USERS_PROFILE'\r\nconst SET_STATUS = 'SET_STATUS'\r\nlet initialState = {\r\n    post: [\r\n        {id:1, post:'Godd'},\r\n        {id:2, post:'Godd'},\r\n        {id:3, post:'Godd'}\r\n    ],\r\n    newPost:'gf',\r\n    profile:null,\r\n    status:''\r\n}\r\nconst profileReducer = (state = initialState,action) =>{\r\n    switch(action.type){\r\n        case ADD_POST:{\r\n            let newPost = {\r\n                id: 4,\r\n                post:state.newPost\r\n            }\r\n            let stateCopy = {...state}\r\n            stateCopy.post = [...state.post]\r\n            stateCopy.post.push(newPost)\r\n           // state.post.push(newPost)\r\n            \r\n            return stateCopy\r\n        }    \r\n        case UPDATE_NEW_POST_TEXT:{\r\n            let stateCopy = {\r\n                ...state\r\n\r\n            }\r\n            stateCopy.newPost = action.newText\r\n            \r\n            return stateCopy\r\n        }\r\n        case SET_USERS_PROFILE:\r\n            return{\r\n                ...state,\r\n                profile:action.profile\r\n            } \r\n        case SET_STATUS:{\r\n            return{\r\n                ...state,\r\n                status:action.status\r\n            }  \r\n        }        \r\n        default:\r\n            return state       \r\n    }\r\n       \r\n}\r\nexport let addPostAC = () =>{\r\n    return{\r\n        type:'ADD-POST'\r\n    }\r\n}\r\nexport let updateNewPostTextAC = (newText) =>{\r\n    return{\r\n        type:'UPDATE-NEW-POST-TEXT',newText\r\n    }\r\n}\r\nexport let setUsersProfile = (profile) =>{\r\n    return{\r\n        type:'SET_USERS_PROFILE',profile\r\n    }\r\n}\r\nexport let setStatusAC = (status) =>{\r\n    return{\r\n        type:'SET_STATUS',status\r\n    }\r\n}\r\nexport const setStatusThunk = (userId) => (dispatch) =>{\r\n    profileAPI.getStatus(userId)\r\n    .then(response=>{\r\n        dispatch(setStatusAC(response.data))\r\n    })\r\n}\r\nexport const updateStatusThunk = (status) => (dispatch)=>{\r\n    profileAPI.updateStatus(status)\r\n    .then(response=>{\r\n        if(response.data.resultCode === 0){\r\n            dispatch(setStatusAC(status))\r\n        }\r\n    })\r\n}\r\nexport default profileReducer;","const ADD_MESSAGE = 'ADD-MESSAGE'\r\n\r\n\r\nlet initialState = {\r\n    dialogData:[\r\n        {id:1 , name:'Andriy'},\r\n        {id:2 , name:'Igor'},\r\n        {id:3 , name:'Sasha'},\r\n        {id:4 , name:'Dima'}\r\n    ],\r\n    messageData: [\r\n        {id:1, message:'Hello'},\r\n        {id:2, message:'Bad'},\r\n        {id:3, message:'All'},\r\n        {id:4, message:'good'}\r\n    ]\r\n    \r\n}\r\nconst messageReducer = (state = initialState,action) =>{\r\n    switch(action.type){\r\n        case ADD_MESSAGE:{\r\n            let newMessage = {\r\n                id:5,\r\n                message:action.addNewMessage\r\n                }\r\n                return{\r\n                    ...state,\r\n                    messageData:[...state.messageData,newMessage]\r\n                \r\n                }\r\n                \r\n            }       \r\n         \r\n         default:\r\n            return state     \r\n    }\r\n}\r\nexport let addMessageAC = (addNewMessage) =>{\r\n    return{\r\n        type:'ADD-MESSAGE',addNewMessage\r\n    }\r\n}\r\n\r\n\r\nexport default messageReducer"],"sourceRoot":""}