{"version":3,"sources":["hoc/withAuthRedirect.js","Component/Message/Message.module.css","Component/Message/Message.js","Component/Message/MessageContainer.js"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","DialogReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","name","Message","DialogItem","id","DialogElement","messagePage","dialogData","map","d","MessageItem","className","s","item","message","MessageElement","messageData","m","createRef","dialog","value","addMessage","addNewMessage","AuthRedirectComponent","WithUrlDataContainerComponent","withRouter","dispatch","addMessageAC"],"mappings":"2MAGIA,EAA8B,SAACC,GAC/B,MAAM,CACFC,OAAOD,EAAME,KAAKD,SAGbE,EAAmB,SAACC,GAAc,IACrCC,EADoC,uKAGlC,OAAyB,IAAtBC,KAAKC,MAAMN,OAAyB,kBAAC,IAAD,CAAUO,GAAI,WAC9C,kBAACJ,EAAcE,KAAKC,WAJO,GACVE,IAAML,WAOvC,OADsCM,YAAQX,EAARW,CAAoCL,K,oBCd7EM,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,wBAAwB,KAAO,wB,gHCkDvFC,EAAkBC,YAAU,CAACC,KAAK,UAAhBD,EARL,SAACP,GAChB,OACI,0BAAMS,SAAUT,EAAMU,cAClB,kBAACC,EAAA,EAAD,CAAOC,UAAW,WAAYC,KAAM,kBACpC,4CAKGC,EA/CD,SAACd,GAEX,IAAIe,EAAa,SAACf,GACd,OACA,kBAAC,IAAD,CAASC,GAAI,UAAYD,EAAMgB,IAAKhB,EAAMa,OAG1CI,EAAgBjB,EAAMkB,YAAYC,WAAWC,KAAI,SAAAC,GAAC,OAAG,kBAACN,EAAD,CAAYF,KAAMQ,EAAER,KAAMG,GAAIK,EAAEL,QACrFM,EAAc,SAACtB,GACf,OACA,yBAAKuB,UAAWC,IAAEC,KAAMxB,GAAI,WAAaD,EAAMgB,IAAMhB,EAAM0B,UAG3DC,EAAiB3B,EAAMkB,YAAYU,YAAYR,KAAI,SAAAS,GAAC,OAAE,kBAACP,EAAD,CAAaI,QAASG,EAAEH,QAASV,GAAIa,EAAEb,QACzEd,IAAM4B,YAW9B,OACI,yBAAKP,UAAWC,IAAEE,SACd,6BACCT,GAED,yBAAKM,UAAWC,IAAEO,QACbJ,EACD,kBAACrB,EAAD,CAAiBG,SAjBH,SAACuB,GACtBhC,EAAMiC,WAAWD,EAAME,qB,wBCU5BC,EAAwBvC,aAxBL,SAACI,GACpB,OACI,6BACI,kBAAC,EAAD,CACAkB,YAAalB,EAAMkB,YACnBe,WAAYjC,EAAMiC,iBAqB1BG,EAAgCC,YAAWF,GAChChC,uBAjBO,SAACV,GACnB,MAAM,CACFyB,YAAYzB,EAAMyB,YAClBxB,OAAOD,EAAME,KAAKD,WAGD,SAAC4C,GACtB,MAAM,CACFL,WAAW,SAACC,GACRI,EAASC,YAAaL,QAQnB/B,CAA6CiC","file":"static/js/5.a47521ac.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\nlet mapStateToPropsForRedirect  = (state) =>{\r\n    return{\r\n        isAuth:state.auth.isAuth\r\n    }\r\n}\r\nexport const withAuthRedirect = (Component) =>{\r\n    class RedirectComponent extends React.Component{\r\n        render(){\r\n            if(this.props.isAuth === false) return <Redirect to={'/login'}/>\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n   return ConnectedAuthRedirectComponent \r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__l2qj5\",\"dialog\":\"Message_dialog__1VDo3\",\"item\":\"Message_item__3qQZh\"};","import React from 'react'\r\nimport s from './Message.module.css'\r\nimport { NavLink,Redirect } from 'react-router-dom';\r\nimport { addMessageAC, updateNewMessageTextAC } from '../../Redux/message-reducer';\r\nimport { Field, reduxForm } from 'redux-form';\r\nlet Message = (props) =>{\r\n  \r\n    let DialogItem = (props) =>{\r\n        return(\r\n        <NavLink to={'/dialog' + props.id}>{props.name}</NavLink>\r\n        )\r\n    }\r\n    let DialogElement = props.messagePage.dialogData.map(d =><DialogItem name={d.name} id={d.id}/>)\r\n    let MessageItem = (props) =>{\r\n        return(\r\n        <div className={s.item} to={'/message' + props.id} >{props.message}</div>\r\n        )\r\n    }\r\n    let MessageElement = props.messagePage.messageData.map(m=><MessageItem message={m.message} id={m.id}/>)\r\n    let newMessageElement = React.createRef()\r\n    let addMessageReduxForm = (value) =>{\r\n         props.addMessage(value.addNewMessage)\r\n    \r\n    }\r\n    \r\n        \r\n      \r\n\r\n    \r\n  \r\n    return(\r\n        <div className={s.message}>\r\n            <div>\r\n            {DialogElement}\r\n            </div>\r\n            <div className={s.dialog}>\r\n                {MessageElement}\r\n                <DialogReduxForm onSubmit={addMessageReduxForm}/>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\nconst DialogForm = (props) =>{\r\n    return(\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={'textarea'} name={'addNewMessage'}/>\r\n            <button>Send</button>\r\n        </form>\r\n    )\r\n}\r\nconst DialogReduxForm = reduxForm({form:'dialog'})(DialogForm)\r\nexport default Message\r\n//<textarea ref={newMessageElement} value={props.messagePage.newMessage} onChange={onMessageChange}/>\r\n     //           <button onClick={addMessage}>Send</button>","import React from 'react'\r\n\r\nimport { addMessageAC} from '../../Redux/message-reducer';\r\nimport Message from './Message';\r\nimport { connect } from 'react-redux';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { withRouter } from \"react-router\";\r\nlet MessageContainer = (props) =>{\r\n    return(\r\n        <div>\r\n            <Message \r\n            messagePage={props.messagePage}\r\n            addMessage={props.addMessage}\r\n            />\r\n        </div>\r\n    )\r\n}\r\nlet mapStateToProps = (state) =>{\r\n    return{\r\n        messagePage:state.messagePage,\r\n        isAuth:state.auth.isAuth\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) =>{\r\n    return{\r\n        addMessage:(addNewMessage) =>{\r\n            dispatch(addMessageAC(addNewMessage))\r\n        }\r\n        \r\n    }\r\n}\r\nlet AuthRedirectComponent = withAuthRedirect(MessageContainer)\r\n\r\nlet WithUrlDataContainerComponent = withRouter(AuthRedirectComponent)\r\nexport default connect (mapStateToProps,mapDispatchToProps)(WithUrlDataContainerComponent)"],"sourceRoot":""}